<?xml version="1.0" encoding="UTF-8"?>
<page>
<section type="module">
    <name>pygame.display</name>
    <short-description>pygame module to control the display window and screen</short-description>
    <description>
    This module offers control over the pygame display. Pygame has a single display
    Surface that is either contained in a window or runs full screen. Once you
    create the display you treat it as a regular Surface. Changes are not
    immediately visible onscreen; you must choose one of the two flipping functions
    to update the actual display.

    The origin of the display, where x = 0 and y = 0, is the top left of the
    screen. Both axes increase positively towards the bottom right of the screen.

    The pygame display can actually be initialized in one of several modes. By
    default, the display is a basic software driven framebuffer. You can request
    special modules like automatic scaling or OpenGL support. These are
    controlled by flags passed to ``pygame.display.set_mode()``.

    Pygame can only have a single display active at any time. Creating a new one
    with ``pygame.display.set_mode()`` will close the previous display. To detect
    the number and size of attached screens, you can use
    ``pygame.display.get_desktop_sizes`` and then select appropriate window size
    and display index to pass to ``pygame.display.set_mode()``.

    For backward compatibility ``pygame.display`` allows precise control over
    the pixel format or display resolutions. This used to be necessary with old
    graphics cards and CRT screens, but is usually not needed any more. Use the
    functions ``pygame.display.mode_ok()``, ``pygame.display.list_modes()``, and
    ``pygame.display.Info()`` to query detailed information about the display.

    Once the display Surface is created, the functions from this module affect the
    single existing display. The Surface becomes invalid if the module is
    uninitialized. If a new display mode is set, the existing Surface will
    automatically switch to operate on the new display.

    When the display mode is set, several events are placed on the pygame event
    queue. ``pygame.QUIT`` is sent when the user has requested the program to
    shut down. The window will receive ``pygame.ACTIVEEVENT`` events as the display
    gains and loses input focus. If the display is set with the
    ``pygame.RESIZABLE`` flag, ``pygame.VIDEORESIZE`` events will be sent when the
    user adjusts the window dimensions. Hardware displays that draw direct to the
    screen will get ``pygame.VIDEOEXPOSE`` events when portions of the window must
    be redrawn.

    A new windowevent API was introduced in pygame 2.0.1. Check event module docs
    for more information on that

    Some display environments have an option for automatically stretching all
    windows. When this option is enabled, this automatic stretching distorts the
    appearance of the pygame window. In the pygame examples directory, there is
    example code (prevent_display_stretching.py) which shows how to disable this
    automatic stretching of the pygame display on Microsoft Windows (Vista or newer
    required).
    </description>
    <member type="class">
        <name>pygame.sprite.Sprite</name>
        <short-description>This is a short description</short-description>
        <prototype>prototype -> None</prototype>
        <description>Osef</description>
        <member type="function">
            <name>draw</name>
            <short-description>This is another short description</short-description>
            <prototype>prototype -> None</prototype>
            <description>None</description>
        </member>
    </member>
    <member type="function">
        <name>pygame.display.init()</name>
        <short-description>Initialize the display module</short-description>
        <prototype>init() -> None</prototype>
        <description>
        Initializes the pygame display module. The display module cannot do anything
        until it is initialized. This is usually handled for you automatically when
        you call the higher level ``pygame.init()``.

        Pygame will select from one of several internal display backends when it is
        initialized. The display mode will be chosen depending on the platform and
        permissions of current user. Before the display module is initialized the
        environment variable ``SDL_VIDEODRIVER`` can be set to control which backend
        is used. The systems with multiple choices are listed here.

        ```
        Windows : windib, directx
        Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib
        ```

        On some platforms it is possible to embed the pygame display into an already
        existing window. To do this, the environment variable ``SDL_WINDOWID`` must
        be set to a string containing the window id or handle. The environment
        variable is checked when the pygame display is initialized. Be aware that
        there can be many strange side effects when running in an embedded display.

        It is harmless to call this more than once, repeated calls have no effect.
        </description>
    </member>
    <member type="function">
        <name>pygame.display.set_mode()</name>
        <short-description>Initialize a window or screen for display</short-description>
        <prototype>set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface</prototype>
        <description>
        This will create a window or display output and return a display Surface.
        The arguments passed in are requests for a display type. The actual created
        display will be the best possible match supported by the system.

        Note that calling this function implicitly initializes ``pygame.display``, if
        it was not initialized before.

        The size argument is a pair of numbers representing the width and
        height. The flags argument is a collection of additional options. The depth
        argument represents the number of bits to use for color.

        The Surface that gets returned can be drawn to like a regular Surface but
        changes will eventually be seen on the monitor.

        If no size is passed or is set to ``(0, 0)``, the created Surface will have
        the same size as the current screen resolution. If only the width or height
        are set to ``0``, the Surface will have the same width or height as the
        screen resolution.

        It is usually best to not pass the depth argument. It will default to the
        best and fastest color depth for the system. If your game requires a
        specific color format you can control the depth with this argument. Pygame
        will emulate an unavailable color depth which can be slow.

        When requesting fullscreen display modes, sometimes an exact match for the
        requested size cannot be made. In these situations pygame will select
        the closest compatible match. The returned surface will still always match
        the requested size.

        On high resolution displays(4k, 1080p) and tiny graphics games (640x480)
        show up very small so that they are unplayable. SCALED scales up the window
        for you. The game thinks it's a 640x480 window, but really it can be bigger.
        Mouse events are scaled for you, so your game doesn't need to do it. Note
        that SCALED is considered an experimental API and may change in future
        releases.

        The flags argument controls which type of display you want. There are
        several to choose from, and you can even combine multiple types using the
        bitwise or operator, (the pipe "|" character). Here are the display
        flags you will want to choose from:

        ```
        pygame.FULLSCREEN    create a fullscreen display
        pygame.DOUBLEBUF     only applicable with OPENGL
        pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
        pygame.OPENGL        create an OpenGL-renderable display
        pygame.RESIZABLE     display window should be sizeable
        pygame.NOFRAME       display window will have no border or controls
        pygame.SCALED        resolution depends on desktop size and scale graphics
        pygame.SHOWN         window is opened in visible mode (default)
        pygame.HIDDEN        window is opened in hidden mode
        ```

        .. versionadded:: 2.0.0 ``SCALED``, ``SHOWN`` and ``HIDDEN``

        By setting the ``vsync`` parameter to ``1``, it is possible to get a display
        with vertical sync at a constant frame rate. Subsequent calls to
        :func:`pygame.display.flip()` will block (i.e. *wait*) until the screen has
        refreshed.
        Be careful when using this feature together with ``pygame.time.Clock`` or
        :func:`pygame.time.delay()`, as multiple forms of waiting and frame rate
        limiting may interact to cause skipped frames.

        The request only works when graphics acceleration is available on the
        system. The exact behaviour depends on the hardware and driver
        configuration. When  ``vsync`` is requested, but unavailable,
        ``set_mode()`` may raise an exception.

        Setting the ``vsync`` parameter to ``-1`` in conjunction with  ``OPENGL``
        will request the OpenGL-specific feature "adaptive vsync".

        Here is an example usage of a call
        to ``set_mode()`` that may give you a display with vsync:

        ```
        flags = pygame.OPENGL | pygame.FULLSCREEN
        try:
            window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)
            vsync_success=True
        except pygame.error:
            window_surface = pygame.display.set_mode((1920, 1080), flags)
            vsync_success=False
        ```

        .. versionadded:: 2.0.0 ``vsync`` parameter

        .. versionchanged:: 2.2.0 passing ``vsync`` can raise an exception

        .. versionchanged:: 2.2.0 explicit request for "adaptive vsync"

        .. versionchanged:: 2.2.0 ``vsync=1`` does not require ``SCALED`` or ``OPENGL``
        </description>
    </member>
</section>
</page>